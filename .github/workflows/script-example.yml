# This is a basic workflow to help you get started with Actions

name: Script example

on:
  issues:
    types: [opened, labeled, unlabeled]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Automatic triaging
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const labels = context.payload.issue.labels.map(item => item.name.toLowerCase()).join()

            switch(context.payload.action) {
              case 'opened':
                if (labels.includes("bug") && !labels.match(/domain:/g)) {
                  await github.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: 'It looks like you are missing the Domain for this issue. Learn more here'
                  })
                }
                
                break;
              case 'labeled':
                console.log(await botComment())
                break;
              case 'unlabeled':
                console.log(await botComment())

                

                break;
            }

            async function botComment() asyc {
              const opts = github.issues.listComments.endpoint.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              })

              const comments = await github.paginate(opts)

              return comments.find(comment => comment.user.login == 'github-actions[bot]');
            }         
