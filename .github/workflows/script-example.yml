# This is a basic workflow to help you get started with Actions

name: Script example

on:
  issue_comment:
     types: [created]
  issues:
    types: [opened]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Automatic triaging
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const labels = context.payload.issue.labels.map(item => item.name.toLowerCase()).join()

            const isBug = labels.includes("bug")
            const isDomainIncluded = new RegExp('domain:*', 'g');
            const isPriorityIncluded = new RegExp('p[0-3]', 'g');
            const isTriaged = isDomainIncluded.test(labels) && isPriorityIncluded.test(labels)
            
            const botMessage = `
            **⚠️ Missing information**

            Issues can’t be created without appropiate triaging. to continue please:

            1. Read our [CONTRIBUTING guidelines](https://github.com/Shopify/pos-next-react-native/blob/master/CONTRIBUTING.md).
            2. Comment to this issue with \`/triaged\` once you have updated the issue.
            `

            if (context.eventName === 'issues' && context.payload.action === 'opened') {
              if (isBug && !isTriaged) {
                await github.issues.createComment({
                  issue_number: context.payload.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: botMessage
                })
              }
            } 
            else if (context.eventName === 'issue_comment' && context.payload.action === 'created') {
              if (context.payload.comment.body === '/triaged') {
                const comment = await botComment()

                if (isBug && isTriaged && comment !== undefined) {
                  await github.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id,
                    body: '👍 Thanks for your contributing.'
                  })
                }

                await github.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: context.payload.comment.id,
                  content: isTriaged ? '+1' : '-1' ,
                })
              } 
            }

            async function botComment() {
              const opts = github.issues.listComments.endpoint.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              })

              const comments = await github.paginate(opts)
              return comments.find(comment => comment.user.login == 'github-actions[bot]');
            }

